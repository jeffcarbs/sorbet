digraph "blocks.rb" {
subgraph "cluster_::BlockTest#blockPass" {
    label = "::BlockTest#blockPass";
    color = blue;
    "bb::BlockTest#blockPass_0" [shape = invhouse];
    "bb::BlockTest#blockPass_1" [shape = parallelogram];

    "bb::BlockTest#blockPass_0" [
        label = "block[id=0]()\l<self>: BlockTest = cast(<self>: NilClass, BlockTest);\l<statTemp>$4: Integer(1) = 1\l<statTemp>$5: Integer(2) = 2\l<statTemp>$6: Integer(3) = 3\l<block-pre-call-temp>$7: T.untyped = <self>: BlockTest.foo(<statTemp>$4: Integer(1), <statTemp>$5: Integer(2), <statTemp>$6: Integer(3))\l<selfRestore>$8: BlockTest = <self>\l<unconditional>\l"
    ];

    "bb::BlockTest#blockPass_0" -> "bb::BlockTest#blockPass_2" [style="bold"];
    "bb::BlockTest#blockPass_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::BlockTest#blockPass_1" -> "bb::BlockTest#blockPass_1" [style="bold"];
    "bb::BlockTest#blockPass_2" [
        label = "block[id=2](<self>: BlockTest, <selfRestore>$8: BlockTest)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::BlockTest#blockPass_2" -> "bb::BlockTest#blockPass_5" [style="bold"];
    "bb::BlockTest#blockPass_2" -> "bb::BlockTest#blockPass_3" [style="tapered"];

    "bb::BlockTest#blockPass_3" [
        label = "block[id=3](<selfRestore>$8: BlockTest)\l<returnMethodTemp>$2: T.untyped = Solve<foo>\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::BlockTest#blockPass_3" -> "bb::BlockTest#blockPass_1" [style="bold"];
    "bb::BlockTest#blockPass_5" [
        label = "block[id=5](<self>: BlockTest, <selfRestore>$8: BlockTest)\louterLoops: 1\l<self>: BlockTest = loadSelf\l<blk>$9: T.untyped = load_yield_params(foo)\l<blk>$10: Integer(0) = 0\lx$1: T.untyped = <blk>$9: T.untyped.[](<blk>$10: Integer(0))\l<blk>$10: Integer(1) = 1\ly$1: T.untyped = <blk>$9: T.untyped.[](<blk>$10: Integer(1))\l<blockReturnTemp>$11: T.untyped = x$1\l<blockReturnTemp>$12: T.noreturn = blockreturn<foo> <blockReturnTemp>$11: T.untyped\l<unconditional>\l"
    ];

    "bb::BlockTest#blockPass_5" -> "bb::BlockTest#blockPass_2" [style="bold"];
}

}

