digraph "math.rb" {
subgraph "cluster_::<Class:Example>#calculate" {
    label = "::<Class:Example>#calculate";
    color = blue;
    "bb::<Class:Example>#calculate_0" [shape = invhouse];
    "bb::<Class:Example>#calculate_1" [shape = parallelogram];

    "bb::<Class:Example>#calculate_0" [
        label = "block[id=0]()\l<self>: T.class_of(Example) = cast(<self>: NilClass, T.class_of(Example));\lis_add: T::Boolean = load_arg(is_add)\la: Integer = load_arg(a)\lb: Integer = load_arg(b)\lis_add: T::Boolean\l"
    ];

    "bb::<Class:Example>#calculate_0" -> "bb::<Class:Example>#calculate_2" [style="bold"];
    "bb::<Class:Example>#calculate_0" -> "bb::<Class:Example>#calculate_3" [style="tapered"];

    "bb::<Class:Example>#calculate_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::<Class:Example>#calculate_1" -> "bb::<Class:Example>#calculate_1" [style="bold"];
    "bb::<Class:Example>#calculate_2" [
        label = "block[id=2](a: Integer, b: Integer)\l<returnMethodTemp>$2: Integer = a: Integer.+(b: Integer)\l<unconditional>\l"
    ];

    "bb::<Class:Example>#calculate_2" -> "bb::<Class:Example>#calculate_4" [style="bold"];
    "bb::<Class:Example>#calculate_3" [
        label = "block[id=3](a: Integer, b: Integer)\l<returnMethodTemp>$2: Integer = a: Integer.-(b: Integer)\l<unconditional>\l"
    ];

    "bb::<Class:Example>#calculate_3" -> "bb::<Class:Example>#calculate_4" [style="bold"];
    "bb::<Class:Example>#calculate_4" [
        label = "block[id=4](<returnMethodTemp>$2: Integer)\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: Integer\l<unconditional>\l"
    ];

    "bb::<Class:Example>#calculate_4" -> "bb::<Class:Example>#calculate_1" [style="bold"];
}

subgraph "cluster_::<Class:Example>#<static-init>" {
    label = "::<Class:Example>#<static-init>";
    color = blue;
    "bb::<Class:Example>#<static-init>_0" [shape = invhouse];
    "bb::<Class:Example>#<static-init>_1" [shape = parallelogram];

    "bb::<Class:Example>#<static-init>_0" [
        label = "block[id=0]()\l<self>: T.class_of(Example) = cast(<self>: NilClass, T.class_of(Example));\l<block-pre-call-temp>$4: Sorbet::Private::Static::Void = <self>: T.class_of(Example).sig()\l<selfRestore>$5: T.class_of(Example) = <self>\l<unconditional>\l"
    ];

    "bb::<Class:Example>#<static-init>_0" -> "bb::<Class:Example>#<static-init>_2" [style="bold"];
    "bb::<Class:Example>#<static-init>_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::<Class:Example>#<static-init>_1" -> "bb::<Class:Example>#<static-init>_1" [style="bold"];
    "bb::<Class:Example>#<static-init>_2" [
        label = "block[id=2](<self>: T.class_of(Example), <selfRestore>$5: T.class_of(Example))\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:Example>#<static-init>_2" -> "bb::<Class:Example>#<static-init>_5" [style="bold"];
    "bb::<Class:Example>#<static-init>_2" -> "bb::<Class:Example>#<static-init>_3" [style="tapered"];

    "bb::<Class:Example>#<static-init>_3" [
        label = "block[id=3](<selfRestore>$5: T.class_of(Example))\l<returnMethodTemp>$2: Sorbet::Private::Static::Void = Solve<sig>\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: Sorbet::Private::Static::Void\l<unconditional>\l"
    ];

    "bb::<Class:Example>#<static-init>_3" -> "bb::<Class:Example>#<static-init>_1" [style="bold"];
    "bb::<Class:Example>#<static-init>_5" [
        label = "block[id=5](<self>: T.class_of(Example), <selfRestore>$5: T.class_of(Example))\louterLoops: 1\l<self>: T::Private::Methods::DeclBuilder = loadSelf\l<hashTemp>$12: Symbol(:\"is_add\") = :\"is_add\"\lkeep_for_ide$14: T.class_of(T) = alias <C T>\l<hashTemp>$13: <Type: T::Boolean> = alias <C Boolean>\l<hashTemp>$15: Symbol(:\"a\") = :\"a\"\l<hashTemp>$16: T.class_of(Integer) = alias <C Integer>\l<hashTemp>$17: Symbol(:\"b\") = :\"b\"\l<hashTemp>$18: T.class_of(Integer) = alias <C Integer>\l<magic>$19: T.class_of(<Magic>) = alias <C <Magic>>\l<statTemp>$11: {is_add: <Type: T::Boolean>, a: T.class_of(Integer), b: T.class_of(Integer)} = <magic>$19: T.class_of(<Magic>).<build-hash>(<hashTemp>$12: Symbol(:\"is_add\"), <hashTemp>$13: <Type: T::Boolean>, <hashTemp>$15: Symbol(:\"a\"), <hashTemp>$16: T.class_of(Integer), <hashTemp>$17: Symbol(:\"b\"), <hashTemp>$18: T.class_of(Integer))\l<statTemp>$9: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<statTemp>$11: {is_add: <Type: T::Boolean>, a: T.class_of(Integer), b: T.class_of(Integer)})\l<statTemp>$20: T.class_of(Integer) = alias <C Integer>\l<blockReturnTemp>$8: T::Private::Methods::DeclBuilder = <statTemp>$9: T::Private::Methods::DeclBuilder.returns(<statTemp>$20: T.class_of(Integer))\l<blockReturnTemp>$21: T.noreturn = blockreturn<sig> <blockReturnTemp>$8: T::Private::Methods::DeclBuilder\l<unconditional>\l"
    ];

    "bb::<Class:Example>#<static-init>_5" -> "bb::<Class:Example>#<static-init>_2" [style="bold"];
}

}

